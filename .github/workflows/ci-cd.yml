name: TTS Service CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: tts-service
  DOCKER_REGISTRY: ghcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      env:
        AZURE_SPEECH_KEY: ${{ secrets.AZURE_SPEECH_KEY }}
        AZURE_SPEECH_REGION: ${{ secrets.AZURE_SPEECH_REGION }}
      run: |
        pytest tests/ -v --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: tts-service-coverage

    - name: Test audio generation
      env:
        AZURE_SPEECH_KEY: ${{ secrets.AZURE_SPEECH_KEY }}
        AZURE_SPEECH_REGION: ${{ secrets.AZURE_SPEECH_REGION }}
      run: |
        python -c "
        import requests
        import time
        
        # Start server in background
        import subprocess
        import threading
        
        def start_server():
            subprocess.run(['uvicorn', 'tts_service:app', '--port', '8003'], 
                          capture_output=True)
        
        server_thread = threading.Thread(target=start_server)
        server_thread.daemon = True
        server_thread.start()
        
        # Wait for server to start
        time.sleep(5)
        
        # Test endpoint
        try:
            response = requests.post('http://localhost:8003/tts/convert',
                                   json={'text': 'Test audio generation'},
                                   timeout=30)
            assert response.status_code == 200
            assert response.headers.get('content-type') == 'audio/wav'
            print('✅ TTS endpoint test passed')
        except Exception as e:
            print(f'❌ TTS endpoint test failed: {e}')
            exit(1)
        " || echo "TTS test skipped (missing credentials)"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security scan with bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  docker:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.tts
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  performance-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust

    - name: Run performance tests
      env:
        AZURE_SPEECH_KEY: ${{ secrets.AZURE_SPEECH_KEY }}
        AZURE_SPEECH_REGION: ${{ secrets.AZURE_SPEECH_REGION }}
      run: |
        # Create performance test script
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        import json
        
        class TTSUser(HttpUser):
            wait_time = between(1, 3)
            
            @task
            def synthesize_text(self):
                payload = {
                    "text": "Performance test audio generation",
                    "voice_name": "ko-KR-SunHiNeural"
                }
                self.client.post("/tts/convert", json=payload)
        EOF
        
        # Start TTS service in background
        uvicorn tts_service:app --port 8003 --host 0.0.0.0 &
        sleep 10
        
        # Run performance test
        locust -f locustfile.py --host=http://localhost:8003 \
               --users 5 --spawn-rate 1 --run-time 30s --headless \
               --html performance-report.html || echo "Performance test completed"

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html

  deploy-staging:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying TTS Service to staging environment"
        # Add your staging deployment commands here

  deploy-production:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying TTS Service to production environment"
        # Add your production deployment commands here
